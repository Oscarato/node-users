{
	"info": {
		"_postman_id": "87151900-0e14-4de0-b5fc-be3dff9ff717",
		"name": "PruebasNode",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "156195",
		"_collection_link": "https://dark-eclipse-207122.postman.co/workspace/ogmios~1c12e258-1653-4f40-a0a2-2ef9a767ee81/collection/156195-87151900-0e14-4de0-b5fc-be3dff9ff717?action=share&source=collection_link&creator=156195"
	},
	"item": [
		{
			"name": "http://localhost:3000/users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"Response body is empty\", function () {",
							"    pm.expect(pm.response.text()).to.equal(\"\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Request URL is correct\", function () {",
							"    pm.expect(pm.request.url).to.equal(\"http://localhost:3000/users\");",
							"});",
							"",
							"",
							"pm.test(\"Validate request method is POST\", function () {",
							"    pm.expect(pm.request.method).to.equal(\"POST\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZmY0OGQ2ZTlmNjgyMjVjZWRhMDFjNCIsInJvbGwiOiIxIiwiZW1haWwiOiJvc2NhcmF0bzE5OTNAZ21haWwuY29tIiwiaWF0IjoxNjk0NDUyNTEyLCJleHAiOjE2OTQ0NTM3MTJ9.7T5-c2IFnEo-yLAdZZAM5p0WStOWThVEMW_e0N9nz58",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Oscar Jimenez\",\r\n    \"email\": \"racsokoll@hotmail.com\",\r\n    \"password\": \"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
							"  ",
							"  responseData.forEach(function(user) {",
							"    pm.expect(user.email).to.be.a('string').and.to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user.name).to.be.a('string').and.to.have.lengthOf.at.least(1);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'datecreated' field is a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(function (user) {",
							"        pm.expect(user.datecreated).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Invalid date format\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZmY0OGQ2ZTlmNjgyMjVjZWRhMDFjNCIsInJvbGwiOiIxIiwiZW1haWwiOiJvc2NhcmF0bzE5OTNAZ21haWwuY29tIiwiaWF0IjoxNjk0NDU3MTI4LCJleHAiOjE2OTQ0NTgzMjh9.Jow8nRK5UjWQQ4Nviy8W_HUQEZrk_XRlGEKd6QRqkrQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/users/64ff56924a48a8ded443be54",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.email).to.exist.and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Password should not be empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.password).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"datecreated is a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.datecreated).to.exist.and.to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"datecreated should be a valid date format\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/users/64ff56924a48a8ded443be54",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"64ff56924a48a8ded443be54"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"  pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"Response has an error message\", function () {",
							"    pm.expect(pm.response.text()).to.equal(\"Error: Unauthorized\");",
							"});",
							"",
							"",
							"pm.test(\"Error message is 'Unauthorized'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Unauthorized\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Request body is not empty\", function () {",
							"  pm.expect(pm.request.body).to.exist.and.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Javier Amaya\",\r\n    \"email\": \"oscarato1993@gmail.com\",\r\n    \"password\": \"1234\",\r\n    \"roll\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.response).to.exist.and.to.be.a('boolean');",
							"    pm.expect(responseData.token).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Token is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"    ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'response' field is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.response).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"oscarato1993@gmail.com\",\r\n    \"password\": \"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/token",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - response and token\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('response');",
							"    pm.expect(responseData).to.have.property('token');",
							"});",
							"",
							"",
							"pm.test(\"Token is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"The response field should be a boolean value\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.response).to.be.a('boolean');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"racsokoll@hotmail.com\",\r\n    \"password\": \"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/token",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/users/64ff56709ca01a935627a00e",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response body is empty\", function () {",
							"    pm.expect(pm.response.text()).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the user with ID 64ff56709ca01a935627a00e is deleted\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"    pm.expect(pm.response.text()).to.equal(\"\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that user with ID 64ff56709ca01a935627a00e does not exist\", function () {",
							"    pm.expect(pm.response.text()).to.eql(\"\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is within acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZmY0OGQ2ZTlmNjgyMjVjZWRhMDFjNCIsInJvbGwiOiIxIiwiZW1haWwiOiJvc2NhcmF0bzE5OTNAZ21haWwuY29tIiwiaWF0IjoxNjk0NDUyNTEyLCJleHAiOjE2OTQ0NTM3MTJ9.7T5-c2IFnEo-yLAdZZAM5p0WStOWThVEMW_e0N9nz58",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3000/users/64ff56709ca01a935627a00e",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"64ff56709ca01a935627a00e"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/users/64ff48d6e9f68225ceda01c4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response body has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData._id).to.exist;",
							"    pm.expect(responseData.name).to.exist;",
							"    pm.expect(responseData.email).to.exist;",
							"    pm.expect(responseData.password).to.exist;",
							"    pm.expect(responseData.roll).to.exist;",
							"    pm.expect(responseData.datecreated).to.exist;",
							"    pm.expect(responseData.__v).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"The _id should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid email format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.email).to.match(/\\S+@\\S+\\.\\S+/);",
							"});",
							"",
							"",
							"pm.test(\"Password is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.password).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZmY0OGQ2ZTlmNjgyMjVjZWRhMDFjNCIsInJvbGwiOiIxIiwiZW1haWwiOiJvc2NhcmF0bzE5OTNAZ21haWwuY29tIiwiaWF0IjoxNjk0NDUyNTEyLCJleHAiOjE2OTQ0NTM3MTJ9.7T5-c2IFnEo-yLAdZZAM5p0WStOWThVEMW_e0N9nz58",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Javier Amaya\",\r\n    \"email\": \"oscarato1993@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/users/64ff48d6e9f68225ceda01c4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"64ff48d6e9f68225ceda01c4"
					]
				}
			},
			"response": []
		}
	]
}